// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "healthcare-app/internal/auth/dto"
	mock "github.com/stretchr/testify/mock"

	pkgdto "healthcare-app/pkg/dto"
)

// AdminUseCase is an autogenerated mock type for the AdminUseCase type
type AdminUseCase struct {
	mock.Mock
}

// CreateAccountPharmacist provides a mock function with given fields: ctx, reqBody, roleId
func (_m *AdminUseCase) CreateAccountPharmacist(ctx context.Context, reqBody *dto.RequestPharmacistCreateAccount, roleId int) error {
	ret := _m.Called(ctx, reqBody, roleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RequestPharmacistCreateAccount, int) error); ok {
		r0 = rf(ctx, reqBody, roleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccount provides a mock function with given fields: ctx, pharmacist
func (_m *AdminUseCase) DeleteAccount(ctx context.Context, pharmacist *dto.RequestPharmacistDeleteAccount) error {
	ret := _m.Called(ctx, pharmacist)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RequestPharmacistDeleteAccount) error); ok {
		r0 = rf(ctx, pharmacist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllAccount provides a mock function with given fields: ctx, roleId, query, isAssign, role, sortBy, sort, limit, offset
func (_m *AdminUseCase) GetAllAccount(ctx context.Context, roleId int, query string, isAssign int, role int, sortBy string, sort string, limit int, offset int) ([]dto.ResponseUserWithDetail, int64, error) {
	ret := _m.Called(ctx, roleId, query, isAssign, role, sortBy, sort, limit, offset)

	var r0 []dto.ResponseUserWithDetail
	if rf, ok := ret.Get(0).(func(context.Context, int, string, int, int, string, string, int, int) []dto.ResponseUserWithDetail); ok {
		r0 = rf(ctx, roleId, query, isAssign, role, sortBy, sort, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ResponseUserWithDetail)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, int, string, int, int, string, string, int, int) int64); ok {
		r1 = rf(ctx, roleId, query, isAssign, role, sortBy, sort, limit, offset)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, string, int, int, string, string, int, int) error); ok {
		r2 = rf(ctx, roleId, query, isAssign, role, sortBy, sort, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPharmacistByID provides a mock function with given fields: ctx, pharmacistID
func (_m *AdminUseCase) GetPharmacistByID(ctx context.Context, pharmacistID int64) (*dto.ResponseUserWithDetail, error) {
	ret := _m.Called(ctx, pharmacistID)

	var r0 *dto.ResponseUserWithDetail
	if rf, ok := ret.Get(0).(func(context.Context, int64) *dto.ResponseUserWithDetail); ok {
		r0 = rf(ctx, pharmacistID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ResponseUserWithDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, pharmacistID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchPharmacist provides a mock function with given fields: ctx, request
func (_m *AdminUseCase) SearchPharmacist(ctx context.Context, request *dto.SearchPharmacistRequest) ([]*dto.UserPharmacistResponse, *pkgdto.PageMetaData, error) {
	ret := _m.Called(ctx, request)

	var r0 []*dto.UserPharmacistResponse
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SearchPharmacistRequest) []*dto.UserPharmacistResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.UserPharmacistResponse)
		}
	}

	var r1 *pkgdto.PageMetaData
	if rf, ok := ret.Get(1).(func(context.Context, *dto.SearchPharmacistRequest) *pkgdto.PageMetaData); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pkgdto.PageMetaData)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *dto.SearchPharmacistRequest) error); ok {
		r2 = rf(ctx, request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SearchUser provides a mock function with given fields: ctx, request
func (_m *AdminUseCase) SearchUser(ctx context.Context, request *dto.SearchUserRequest) ([]*dto.UserOrAdminResponse, *pkgdto.SeekPageMetaData, error) {
	ret := _m.Called(ctx, request)

	var r0 []*dto.UserOrAdminResponse
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SearchUserRequest) []*dto.UserOrAdminResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.UserOrAdminResponse)
		}
	}

	var r1 *pkgdto.SeekPageMetaData
	if rf, ok := ret.Get(1).(func(context.Context, *dto.SearchUserRequest) *pkgdto.SeekPageMetaData); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pkgdto.SeekPageMetaData)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *dto.SearchUserRequest) error); ok {
		r2 = rf(ctx, request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateAccount provides a mock function with given fields: ctx, pharmacist
func (_m *AdminUseCase) UpdateAccount(ctx context.Context, pharmacist *dto.RequestPharmacistUpdateAccount) (*dto.ResponsePharmacistUpdateAccount, error) {
	ret := _m.Called(ctx, pharmacist)

	var r0 *dto.ResponsePharmacistUpdateAccount
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RequestPharmacistUpdateAccount) *dto.ResponsePharmacistUpdateAccount); ok {
		r0 = rf(ctx, pharmacist)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ResponsePharmacistUpdateAccount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.RequestPharmacistUpdateAccount) error); ok {
		r1 = rf(ctx, pharmacist)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAdminUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdminUseCase creates a new instance of AdminUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdminUseCase(t mockConstructorTestingTNewAdminUseCase) *AdminUseCase {
	mock := &AdminUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
