// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "healthcare-app/internal/auth/entity"
	mock "github.com/stretchr/testify/mock"
)

// RefreshTokenRepository is an autogenerated mock type for the RefreshTokenRepository type
type RefreshTokenRepository struct {
	mock.Mock
}

// DeleteByJTI provides a mock function with given fields: ctx, jti
func (_m *RefreshTokenRepository) DeleteByJTI(ctx context.Context, jti string) error {
	ret := _m.Called(ctx, jti)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, jti)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByUserID provides a mock function with given fields: ctx, userID
func (_m *RefreshTokenRepository) DeleteByUserID(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByJTI provides a mock function with given fields: ctx, jti
func (_m *RefreshTokenRepository) FindByJTI(ctx context.Context, jti string) (*entity.RefreshToken, error) {
	ret := _m.Called(ctx, jti)

	var r0 *entity.RefreshToken
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.RefreshToken); ok {
		r0 = rf(ctx, jti)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RefreshToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, jti)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *RefreshTokenRepository) Save(ctx context.Context, _a1 *entity.RefreshToken) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.RefreshToken) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRefreshTokenRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRefreshTokenRepository creates a new instance of RefreshTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRefreshTokenRepository(t mockConstructorTestingTNewRefreshTokenRepository) *RefreshTokenRepository {
	mock := &RefreshTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
