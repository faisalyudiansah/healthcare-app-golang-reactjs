// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "healthcare-app/internal/auth/dto"
	entity "healthcare-app/internal/auth/entity"

	mock "github.com/stretchr/testify/mock"
)

// AdminRepository is an autogenerated mock type for the AdminRepository type
type AdminRepository struct {
	mock.Mock
}

// CountAllAcount provides a mock function with given fields: ctx, query, isAssign, role
func (_m *AdminRepository) CountAllAcount(ctx context.Context, query string, isAssign int, role int) (int64, error) {
	ret := _m.Called(ctx, query, isAssign, role)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) int64); ok {
		r0 = rf(ctx, query, isAssign, role)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, query, isAssign, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccount provides a mock function with given fields: ctx, id
func (_m *AdminRepository) DeleteAccount(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *AdminRepository) FindByID(ctx context.Context, id int64) (*entity.UserDetail, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.UserDetail
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.UserDetail); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAccount provides a mock function with given fields: ctx, query, isAssign, role, sortBy, sort, limit, offset
func (_m *AdminRepository) GetAllAccount(ctx context.Context, query string, isAssign int, role int, sortBy string, sort string, limit int, offset int) ([]entity.UserWithDetail, error) {
	ret := _m.Called(ctx, query, isAssign, role, sortBy, sort, limit, offset)

	var r0 []entity.UserWithDetail
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, string, string, int, int) []entity.UserWithDetail); ok {
		r0 = rf(ctx, query, isAssign, role, sortBy, sort, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.UserWithDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int, string, string, int, int) error); ok {
		r1 = rf(ctx, query, isAssign, role, sortBy, sort, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPharmacistByID provides a mock function with given fields: ctx, pharmacistID
func (_m *AdminRepository) GetPharmacistByID(ctx context.Context, pharmacistID int64) (*entity.UserWithDetail, error) {
	ret := _m.Called(ctx, pharmacistID)

	var r0 *entity.UserWithDetail
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entity.UserWithDetail); ok {
		r0 = rf(ctx, pharmacistID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserWithDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, pharmacistID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsPharmacistAssign provides a mock function with given fields: ctx, id
func (_m *AdminRepository) IsPharmacistAssign(ctx context.Context, id int64) (bool, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchPharmacist provides a mock function with given fields: ctx, request
func (_m *AdminRepository) SearchPharmacist(ctx context.Context, request *dto.SearchPharmacistRequest) ([]*entity.UserPharmacist, error) {
	ret := _m.Called(ctx, request)

	var r0 []*entity.UserPharmacist
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SearchPharmacistRequest) []*entity.UserPharmacist); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.UserPharmacist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.SearchPharmacistRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchUser provides a mock function with given fields: ctx, request
func (_m *AdminRepository) SearchUser(ctx context.Context, request *dto.SearchUserRequest) ([]*entity.UserOrAdmin, error) {
	ret := _m.Called(ctx, request)

	var r0 []*entity.UserOrAdmin
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SearchUserRequest) []*entity.UserOrAdmin); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.UserOrAdmin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.SearchUserRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccount provides a mock function with given fields: ctx, pharmacist
func (_m *AdminRepository) UpdateAccount(ctx context.Context, pharmacist *entity.UserDetail) error {
	ret := _m.Called(ctx, pharmacist)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.UserDetail) error); ok {
		r0 = rf(ctx, pharmacist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAdminRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdminRepository creates a new instance of AdminRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdminRepository(t mockConstructorTestingTNewAdminRepository) *AdminRepository {
	mock := &AdminRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
