// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "healthcare-app/internal/auth/dto"
	goth "github.com/markbates/goth"

	mock "github.com/stretchr/testify/mock"
)

// OauthUseCase is an autogenerated mock type for the OauthUseCase type
type OauthUseCase struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, request
func (_m *OauthUseCase) Login(ctx context.Context, request *goth.User) (*dto.ResponseLogin, error) {
	ret := _m.Called(ctx, request)

	var r0 *dto.ResponseLogin
	if rf, ok := ret.Get(0).(func(context.Context, *goth.User) *dto.ResponseLogin); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ResponseLogin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *goth.User) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOauthUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewOauthUseCase creates a new instance of OauthUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOauthUseCase(t mockConstructorTestingTNewOauthUseCase) *OauthUseCase {
	mock := &OauthUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
